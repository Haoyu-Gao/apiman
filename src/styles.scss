@use '~@angular/material' as mat;
@import '~@angular/material/theming';
@import './themes/custom';
@include mat-core();

/***** THEMING *****/
@mixin app-color($config-or-theme) {
  // Extract the color configuration in case a theme has been passed.
  // This allows consumers to either pass a theme object or a color configuration.
  $config: mat-get-color-config($config-or-theme);
  // Extract the palettes you need from the theme definition.
  $primary-palette: map-get($config, primary);
  $accent-palette: map-get($config, accent);
  $warn-palette: map-get($config, warn);

  $primary: mat-color($primary-palette);
  $accent: mat-color($accent-palette);
  $warn: mat-color($warn-palette);

  // CUSTOM SCSS
  .primary-bg{
    background: $primary !important;
  }

  .warn-bg{
    background: $warn !important;
  }

  .accent-bg{
    background: $accent !important;
  }

  .active-link{
    color: $primary;
  }

  .primary, .active{
    color: $primary;
  }

  .accent {
    color: $accent;
  }

  .warn {
    color: $warn;
  }

  .form-field-pre-icon{
    min-width: 40px;
  }

  $directions: top, right, bottom, left;
  @each $dir in $directions{
    .divider-#{$dir}{
      border-#{$dir}: 2px solid $primary;
    }
  }
}

@mixin app-theme($theme) {
  // Extracts the color and typography configurations from the theme.
  $color: mat-get-color-config($theme);
  $typography: mat-get-typography-config($theme);

  // Do not generate styles if configurations for individual theming
  // systems have been explicitly set to `null`.
  @if $color != null {
    @include app-color($color);
  }

  // Include theme styles for core and each component used in your app.
  // Alternatively, you can import and @include the theme mixins for each component
  // that you are using.
  @include angular-material-theme($theme);

  // Include theme styles for components.
}

.theme {
  @include app-theme($theme);
}

$config: mat.get-color-config($theme);

/***** DEFINITIONS *****/
/** Font **/
$default-font: 'Open Sans', sans-serif;

/** Paddings and Margins **/
$sizes: 5, 8, 10, 15, 20, 25, 30, 35, 40;
@each $size in $sizes {
  // Margins
  .mt-#{$size} {
    margin-top: #{$size}px;
  }

  .mr-#{$size} {
    margin-right: #{$size}px;
  }

  .mb-#{$size} {
    margin-bottom: #{$size}px;
  }
  .ml-#{$size} {
    margin-left: #{$size}px;
  }

  // Paddings
  .pt-#{$size} {
    padding-top: #{$size}px;
  }
  .pr-#{$size} {
    padding-right: #{$size}px;
  }
  .pb-#{$size} {
    padding-bottom: #{$size}px;
  }
  .pl-#{$size} {
    padding-left: #{$size}px;
  }
}
/***** DevPortal Default Styling *****/
/** Main tags **/
html {
  font-size: 100%;
}

body {
  font-family: $default-font;
  margin: 0;
  line-height: 1.6;
}

/** h-tags **/
h1 {
  font-size: 2rem;
}

h2 {
  font-size: 1.4rem;
}

h3 {
  font-size: 1.2rem;
}

h4 {
  font-size: 1.0rem;
}

/** a-tags **/
a {
  color: black;
  text-decoration: none;
  &:visited {
    color: black;
  }
}

.pointer{
  cursor: pointer;
}

.input-icon-btn{
  font-size: 22px !important;
}

/***** Material Styling *****/
/** Form Field Pre- and Suffix **/
.mat-form-field-appearance-legacy {
  .mat-form-field-prefix, .mat-form-field-suffix {
    align-self: flex-end;
  }
}

.mat-form-field-prefix {
  margin-right: 10px;
}

.mat-form-field-suffix {
  margin-left: 10px;
}

.mat-simple-snackbar{
  color: white;
}
