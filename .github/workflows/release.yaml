name: Release Workflow
on:
  workflow_dispatch:
    inputs:
      release-version:
        description: 'Version being released'
        required: true
      snapshot-version:
        description: 'Next snapshot version'
        required: true
      branch:
        description: 'Branch to release from'
        required: true
        default: 'master'

defaults:
  run:
    shell: bash -ieo pipefail {0}

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'Apiman'
    steps:
      - name: Set up `mvnd`
        run: bash .github/workflows/support/set-mvn-location.sh

      - name: Set up Node.js v10
        uses: actions/setup-node@v1
        with:
          node-version: 10

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Set up Gren
        run: npm install github-release-notes -g

      - name: Set up NPM CLI Login
        run: npm install -g npm-cli-login

      - name: Import GPG Key
        uses: crazy-max/ghaction-import-gpg@v1
        env:
          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Set up settings.xml
        run: |
          mkdir -p /home/runner/.m2
          chmod 755 /home/runner/.m2
          echo "<settings><servers><server><id>${{ secrets.OSSRH_ID }}</id><username>${{ secrets.OSSRH_USERNAME }}</username><password>${{ secrets.OSSRH_TOKEN }}</password></server></servers><profiles><profile><id>${{ secrets.OSSRH_ID }}</id><activation><activeByDefault>true</activeByDefault></activation><properties><gpg.executable>gpg</gpg.executable><gpg.passphrase>${{ secrets.GPG_PASSPHRASE}}</gpg.passphrase></properties></profile></profiles></settings>" > /home/runner/.m2/settings.xml
          cat /home/runner/.m2/settings.xml

      # Checkout all repositories we're going to use for the release
      - name: Apiman Code Checkout
        run: |
          mkdir apiman
          cd apiman
          git init
          git config --global user.name "apiman-ci"
          git config --global user.email "ci.apiman@gmail.com"
          git remote add origin "https://apiman-ci:${{ secrets.ACCESS_TOKEN }}@github.com/$GITHUB_REPOSITORY.git"
          git fetch
          git checkout master
          git branch --set-upstream-to=origin/master
          git pull

      - name: Apiman Website Code Checkout
        run: |
          mkdir website
          cd website
          git init
          git remote add origin "https://apiman-ci:${{ secrets.ACCESS_TOKEN }}@github.com/Apiman/apiman.github.io.git"
          git fetch
          git checkout master
          git branch --set-upstream-to=origin/master
          git pull

      - name: Apiman Plugins Code Checkout
        run: |
          mkdir plugins
          cd plugins
          git init
          git remote add origin "https://apiman-ci:${{ secrets.ACCESS_TOKEN }}@github.com/Apiman/apiman-plugins.git"
          git fetch
          git checkout master
          git branch --set-upstream-to=origin/master
          git pull

      - name: Apiman Default API Catalog Code Checkout
        run: |
          git clone "https://apiman-ci:${{ secrets.ACCESS_TOKEN }}@github.com/Apiman/apiman-api-catalog.git"
          cd apiman-api-catalog
          git fetch
          git checkout master
          git branch --set-upstream-to=origin/master
          git pull

      - name: Apiman Default Plugin Registry Code Checkout
        run: |
          git clone "https://apiman-ci:${{ secrets.ACCESS_TOKEN }}@github.com/Apiman/apiman-plugin-registry.git"
          cd apiman-plugin-registry
          git fetch
          git checkout master
          git branch --set-upstream-to=origin/master
          git pull

      # Update all project versions to the version # being released
      - name: Update Apiman *Parent* Release Version ${{ github.event.inputs.release-version }} in pom.xml
        run: |
          cd apiman/parent
          mvnd -ntp clean install
          mvnd -ntp versions:set -DnewVersion="${{ github.event.inputs.release-version }}" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvnd -ntp clean install

      - name: Update Apiman Release Version ${{ github.event.inputs.release-version }} in pom.xml
        run: |
          cd apiman
          mvnd -ntp -N versions:update-parent -DparentVersion="[${{ github.event.inputs.release-version }}]" -DgenerateBackupPoms=false
          mvnd -ntp versions:set -DnewVersion="${{ github.event.inputs.release-version }}" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvnd -ntp clean install

      - name: Update Apiman Version in Plugins Project
        run: |
          cd plugins
          sed -i  "s/<version.apiman>.*<\/version.apiman>/<version.apiman>${{ github.event.inputs.release-version }}<\/version.apiman>/g" pom.xml

      - name: Update Apiman Plugins Release Version ${{ github.event.inputs.release-version }} in pom.xml
        run: |
          cd plugins
          mvnd -ntp -N versions:update-parent -DparentVersion="[${{ github.event.inputs.release-version }}]" -DgenerateBackupPoms=false
          mvnd -ntp versions:set -DnewVersion="${{ github.event.inputs.release-version }}" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvnd -ntp clean install

      - name: Commit changes for Apiman Plugin Registry
        env:
          RELEASE_VERSION: ${{ github.event.inputs.release-version }}
          DEV_VERSION: ${{ github.event.inputs.snapshot-version }}
        run: |
          cd apiman-plugin-registry
          bash release.sh

      - name: Commit changes for Apiman API Catalog
        env:
          RELEASE_VERSION: ${{ github.event.inputs.release-version }}
          DEV_VERSION: ${{ github.event.inputs.snapshot-version }}
        run: |
          cd apiman-api-catalog
          bash release.sh

      - name: Update Registry and Catalog links in Apiman
        env:
          RELEASE_VERSION: ${{ github.event.inputs.release-version }}
          DEV_VERSION: ${{ github.event.inputs.snapshot-version }}
        run: |
          find . -name "*.properties" -exec sed -i "s|apiman-manager.api-catalog.catalog-url=https://cdn.jsdelivr.net/gh/apiman/apiman-api-catalog@master/catalog.json|apiman-manager.api-catalog.catalog-url=https://cdn.jsdelivr.net/gh/apiman/apiman-api-catalog@$RELEASE_VERSION/catalog.json|" {} \;
          find . -name "*.properties" -exec sed -i "s|apiman-manager.plugins.registries=https://cdn.jsdelivr.net/gh/apiman/apiman-plugin-registry@master/registry.json|apiman-manager.plugins.registries=https://cdn.jsdelivr.net/gh/apiman/apiman-plugin-registry@$RELEASE_VERSION/registry.json|" {} \;

      # Commit changes back to GitHub
      - name: Commit Changes for Apiman Release Version ${{ github.event.inputs.release-version }}
        run: |
          cd apiman
          git add .
          git commit -m "Automated commit for Release Version: ${{ github.event.inputs.release-version }}"
          git tag -f -a -m "Tagging release ${{ github.event.inputs.release-version }}" ${{ github.event.inputs.release-version }}
          git push --atomic master ${{ github.event.inputs.release-version }} 

      - name: Commit Changes for Apiman Plugins Release Version ${{ github.event.inputs.release-version }}
        run: |
          cd plugins
          git add .
          git commit -m "Automated commit for Release Version: ${{ github.event.inputs.release-version }}"
          git tag -f -a -m "Tagging release ${{ github.event.inputs.release-version }}" ${{ github.event.inputs.release-version }}
          git push --atomic master ${{ github.event.inputs.release-version }} 


      # Create GitHub "release" with attached assets
      - name: Signing and Archiving the Quickstart ZIPs
        run: |
          cd apiman
          mkdir -p releases
          cp distro/wildfly/target/apiman-distro-wildfly-${{ github.event.inputs.release-version }}-overlay.zip releases/.
          cp distro/vertx/target/apiman-distro-vertx-${{ github.event.inputs.release-version }}.zip releases/.
          cp distro/tomcat/target/apiman-distro-tomcat-${{ github.event.inputs.release-version }}-overlay.zip releases/.
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --passphrase-fd 0 --armor --detach-sign releases/apiman-distro-wildfly-${{ github.event.inputs.release-version }}-overlay.zip
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --passphrase-fd 0 --armor --detach-sign releases/apiman-distro-vertx-${{ github.event.inputs.release-version }}.zip
          echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --passphrase-fd 0 --armor --detach-sign releases/apiman-distro-tomcat-${{ github.event.inputs.release-version }}-overlay.zip

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.release-version }}
          name: ${{ github.event.inputs.release-version }}
          prerelease: false
          files: |
            /home/runner/work/apiman/apiman/apiman/releases/apiman-distro-wildfly-${{ github.event.inputs.release-version }}-overlay.zip
            /home/runner/work/apiman/apiman/apiman/releases/apiman-distro-wildfly-${{ github.event.inputs.release-version }}-overlay.zip.asc
            /home/runner/work/apiman/apiman/apiman/releases/apiman-distro-vertx-${{ github.event.inputs.release-version }}.zip
            /home/runner/work/apiman/apiman/apiman/releases/apiman-distro-vertx-${{ github.event.inputs.release-version }}.zip.asc
            /home/runner/work/apiman/apiman/apiman/releases/apiman-distro-tomcat-${{ github.event.inputs.release-version }}-overlay.zip
            /home/runner/work/apiman/apiman/apiman/releases/apiman-distro-tomcat-${{ github.event.inputs.release-version }}-overlay.zip.asc

          # releases/apiman-distro-tomcat-${{ github.event.inputs.release-version }}-overlay.zip
      - name: Generate Release Notes
        run: cd apiman && gren release --token=${{ secrets.GITHUB_TOKEN }} --override

      # Deploy Apiman to Maven Central
      - name: Deploy Apiman to Maven Central
        run: |
          cd apiman
          mvnd deploy --batch-mode -DskipTests -Prelease --settings /home/runner/.m2/settings.xml
          cd parent
          mvnd deploy --batch-mode -DskipTests -Prelease --settings /home/runner/.m2/settings.xml

      # Deploy Apiman Plugins to Maven Central
      - name: Deploy Apiman Plugins to Maven Central
        run: |
          cd plugins
          mvnd deploy --batch-mode -DskipTests -Prelease --settings /home/runner/.m2/settings.xml

      # Update project pom.xml files to next snapshot version and push to GH
      - name: Update Apiman Parent Next Snapshot Version ${{ github.event.inputs.snapshot-version }} in pom.xml
        run: |
          cd apiman/parent
          mvnd -ntp versions:set -DnewVersion="${{ github.event.inputs.snapshot-version }}" -DgenerateBackupPoms=false -DprocessAllModules=true

      - name: Update Apiman Next Snapshot Version ${{ github.event.inputs.snapshot-version }} in pom.xml
        env:
          RELEASE_VERSION: ${{ github.event.inputs.release-version }}
        run: |
          cd apiman
          mvnd -ntp versions:set -DnewVersion="${{ github.event.inputs.snapshot-version }}" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvnd -ntp versions:update-parent -DparentVersion="[${{ github.event.inputs.snapshot-version }}]" -DgenerateBackupPoms=false -DallowSnapshots=true
          find . -name "*.properties" -exec sed -i "s|apiman-manager.api-catalog.catalog-url=https://cdn.jsdelivr.net/gh/apiman/apiman-api-catalog@$RELEASE_VERSION/catalog.json|apiman-manager.api-catalog.catalog-url=https://cdn.jsdelivr.net/gh/apiman/apiman-api-catalog@master/catalog.json|" {} \;
          find . -name "*.properties" -exec sed -i "s|apiman-manager.plugins.registries=https://cdn.jsdelivr.net/gh/apiman/apiman-plugin-registry@$RELEASE_VERSION/registry.json|apiman-manager.plugins.registries=https://cdn.jsdelivr.net/gh/apiman/apiman-plugin-registry@master/registry.json|" {} \;

      - name: Update Apiman Plugins Next Snapshot Version ${{ github.event.inputs.snapshot-version }} in pom.xml
        run: |
          cd plugins
          mvnd -ntp versions:set -DnewVersion="${{ github.event.inputs.snapshot-version }}" -DgenerateBackupPoms=false -DprocessAllModules=true
          mvnd -ntp versions:update-parent -DparentVersion="[${{ github.event.inputs.snapshot-version }}]" -DgenerateBackupPoms=false -DallowSnapshots=true

      - name: Commit Changes for Apiman Next Snapshot Version ${{ github.event.inputs.snapshot-version }}
        run: |
          cd apiman
          git commit -am "Automated commit for Next Snapshot Version: ${{ github.event.inputs.snapshot-version }}"
          git push

      - name: Commit Changes for Apiman Plugins Next Snapshot Version ${{ github.event.inputs.snapshot-version }}
        run: |
          cd plugins
          git commit -am "Automated commit for Next Snapshot Version: ${{ github.event.inputs.snapshot-version }}"
          git push

      # Update project website with new version
      - name: Update Web Site
        run: |
          cd website
          export PREV_VERSION=`cat version`
          find ./latest/ -name '*.html' -exec sed -i "s/$PREV_VERSION/${{ github.event.inputs.release-version }}/g" {} \;
          echo "${{ github.event.inputs.release-version }}" > version
          git add .
          git commit -m "Automated website update for Apiman release: ${{ github.event.inputs.release-version }}"
          git push
